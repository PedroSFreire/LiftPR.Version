#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "utils/random.glsl"
#include "utils/material.glsl"
#include "utils/ray_payload.glsl"
#include "utils/uniform_buffer_object.glsl"
#include "utils/tone_mapping.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT scene_;
layout(binding = 1, rgba32f) uniform image2D output_image_;
layout(binding = 2, rgba32f) uniform image2D accumulation_image_;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject ubo_; };
layout(binding = 7) readonly buffer LightArray { Light[] lights_; };

layout(location = 0) rayPayloadEXT RayPayload ray_;
layout(location = 2) rayPayloadEXT bool shadow_ray_;

#include "utils/sampling.glsl"

struct LightPathNode {
    vec3 color;
    vec3 position;
    vec3 normal;
    vec3 prevDir;
    Material mat;
    
    float dVCM;
    float dVM;
    float dVC;

    vec3 mX;
    vec3 mY;
    vec3 mZ;

    bool specular;

    vec3 bsdfFactor;

    float pdf;
};

#define LIGHTPATHLENGTH 5
#define PI 3.14159265359f
//#define RAIO 0.005f
//#define RAIO 0.0000025f
#define RAIO 0.0015f
//#define RAIO 1.0f
LightPathNode[LIGHTPATHLENGTH] light_paths_;
vec3 lightSourcePos;

//-----------------------------------------------------
// lightpath
//-----------------------------------------------------

void constructLightPath(inout uint seed) {
    float raio;
    if(ubo_.frame > 2){
        raio = RAIO/pow(ubo_.total_number_of_bounces,0.5*RAIO); 
    }
    else
        raio = RAIO/pow(1,0.5*RAIO); //number_of_samples
    uint ray_flags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    float pdf = 1.0f;
    float etaVcm =PI*raio*raio * ubo_.total_number_of_bounces /* *number_of_light_subpaths */;
    float refPdf = 0.0f;
    float refPdfPhong = 0.0f;
    float specChance = 0.0f;
    float diffChance = 0.0f;
    float costheta = 0.0f;
    float continuationProb;
    float cosThetaOut;
    float isLight = 1;
    vec3 bsdfFactor;


    Light light = lights_[0];

    float term1 = 2.0f * c_pi * randomFloat(seed);
    float term2 = sqrt(1.0f - randomFloat(seed));

    vec3 newRayDir = vec3( cos(term1)*term2, sin(term1)*term2, randomFloat(seed));
    newRayDir.z = max(newRayDir.z, 1e-6f);
    vec3 normalL = cross(light.v1.xyz, light.v2.xyz);

    vec3 mZ = normalize(light.normal.xyz);
    vec3 mX = (abs(mZ.x) > 0.99f) ? vec3(0,1,0) : vec3(1,0,0);
    vec3 mY = normalize( cross(mZ, mX) );
    mX = cross(mY, mZ);

    vec3 ro = light.corner.xyz + light.v1.xyz * randomFloat(seed) + light.v2.xyz * randomFloat(seed);
    //vec3 rd = vec3(light.normal.x + randomFloat(seed), light.normal.y + randomFloat(seed), light.normal.z + randomFloat(seed));
    vec3 rd = newRayDir.x * mX + newRayDir.y * mY + newRayDir.z * mZ;
    float directPdf = 2.0 / length(normalize(normalL)) /*number_of_lights*/ ;
    float emissionPdf = (rd.z / PI) * directPdf;
    rd = normalize(rd);
    lightSourcePos = ro;

    vec3 color = light.emission.xyz * rd.z;
    color /= emissionPdf;
    for (int i = 0; i < LIGHTPATHLENGTH; i++) {
        light_paths_[i].position = light_paths_[i].color = light_paths_[i].normal = light_paths_[i].prevDir = vec3(0.0);
        light_paths_[i].dVCM = light_paths_[i].dVC =  light_paths_[i].dVM = 0.0;
        light_paths_[i].mX = light_paths_[i].mY = light_paths_[i].mZ = vec3(0.0);
        light_paths_[i].specular = false;
    }
    
    
    light_paths_[0].dVCM = directPdf / emissionPdf;
    light_paths_[0].dVC = sqrt(rd.z) / emissionPdf;
    light_paths_[0].dVM = light_paths_[0].dVC /etaVcm;

    bool specular_bounce = false;

    for (int i = 0; i < LIGHTPATHLENGTH; i++) {
        ray_.t = tmax;
        ray_.mat = getZeroedMaterial();
        ray_.missed = false;
        ray_.from_inside = false;
        traceRayEXT(scene_, ray_flags, cullMask, 0, 0, 0, ro, tmin, rd, tmax, 0);
        

            if (ray_.missed) {
                break;
            }

            light_paths_[i].mZ = normalize(ray_.normal);
            light_paths_[i].mX = (abs(mZ.x) > 0.99f) ? vec3(0,1,0) : vec3(1,0,0);
            light_paths_[i].mY = normalize( cross(mZ, mX) );
            light_paths_[i].mX = cross(mY, mZ);


            if (dot(rd, ray_.normal) < 0.0) {
            
                light_paths_[i].prevDir = rd;
                light_paths_[i].position = ro;
                light_paths_[i].normal = ray_.normal;
                light_paths_[i].mat = ray_.mat;
                float dist = length(ro-light_paths_[i-1].position);
                if(i>0){
                    light_paths_[i].dVCM *= dist * dist;
                }
                light_paths_[i].dVCM /=clamp( dot(-rd,ray_.normal), 0.0f, 1.0f);
                light_paths_[i].dVM /= clamp( dot(-rd,ray_.normal), 0.0f, 1.0f);
                light_paths_[i].dVC /= clamp( dot(-rd,ray_.normal), 0.0f, 1.0f);
                light_paths_[i].color = color;

                vec3 refDirection = vec3(dot(-rd, mX), dot(-rd, mY), dot(-rd, mZ));
                //smallVcmBRDF(rd, ro, color, specular_bounce, seed, pdf, specChance, continuationProb, cosThetaOut, true)
                sampleBRDF(rd, ro, color, specular_bounce, seed, pdf, specChance, diffChance, bsdfFactor, isLight);
                
                light_paths_[i].bsdfFactor = bsdfFactor;
                light_paths_[i].pdf = pdf;

                vec3 localDir = vec3(dot(-rd, mX), dot(-rd, mY), dot(-rd, mZ));
                costheta = max(0.0f, dot(refDirection, localDir)); 
                refPdfPhong = specChance*((ray_.mat.phongExponent +1)*pow(costheta, ray_.mat.phongExponent)*(0.5f/PI));
                if(ray_.mat.phong != 1) refPdfPhong = specChance;
                refPdf = (dot(-rd,ray_.normal)/PI)*diffChance + refPdfPhong; 
                if(i+1 < LIGHTPATHLENGTH){
                    if(specular_bounce){
                        light_paths_[i].color = vec3(0.0f);
                        light_paths_[i+1].dVCM = 0.0f;
                        light_paths_[i+1].dVM = clamp(dot(rd, ray_.normal),0.0f, 1.0f);
                        light_paths_[i+1].dVC = clamp(dot(rd, ray_.normal),0.0f, 1.0f);
                   } 
                    else{
                        light_paths_[i+1].dVCM = 1/pdf;
                        light_paths_[i+1].dVM = (clamp(dot(rd, ray_.normal),0.0f, 1.0f)/pdf) * (light_paths_[i].dVM *refPdf*continuationProb + light_paths_[i].dVCM * (1/etaVcm) + 1.0f);
                        light_paths_[i+1].dVC = (clamp(dot(rd, ray_.normal),0.0f, 1.0f)/pdf) * (light_paths_[i].dVC *refPdf*continuationProb + light_paths_[i].dVCM + etaVcm);
                    }
            }
        }

    }

}

//-----------------------------------------------------
// eyepath
//-----------------------------------------------------

float getWeightForPath(int s, int t) {
    return float(s + t + 2);
}
bool notZero(vec3 color){
    if(color.x > 0 || color.y > 0 || color.z > 0){
        return true;}
    return false;

}

vec3 traceEyePath(in vec3 ro, in vec3 rd, inout uint seed) {
    float raio;
    if(ubo_.frame > 2){
        raio = RAIO/pow(ubo_.frame,0.5*RAIO); 
    }
    else
        raio = RAIO/pow(1,0.5*RAIO); //number_of_samples
    uint ray_flags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    vec3 prevRo = ro;
    vec3 intersectPoint;
    vec3 prevRayDir = rd;
    float pdf = 1.0f;
    float etaVcm =PI*raio*raio*ubo_.total_number_of_bounces/* *number_of_lights */;
    float refPdf = 0.0f;
    float refPdfPhong = 0.0f;
    float specChance = 0.0f;
    float diffChance = 0.0f;
    float costheta = 0.0f;
    float dVCM = 0.0f;
    float dVC = 0.0f;
    float dVM = 0.0f;
    float cosAtCamera =clamp( dot(vec3(ubo_.x,ubo_.y,ubo_.z),rd ) , 0.0f, 1.0f);
    float imagePointToCameraDist = (ubo_.resX / (2 * tan(ubo_.fov*PI/360))) / cosAtCamera;
    float dist;
    dVCM = cosAtCamera / sqrt(imagePointToCameraDist);
    vec3 mX, mY, mZ;
    float isLight = 0;
    vec3 bsdfFactor;


    float Raio2 = raio*raio;
    float vmNormalization = 1.0f / (PI * Raio2);
    float vmWeight = PI * Raio2 *LIGHTPATHLENGTH; //1 = VCcount = Vmcount; so um light path de onde escolher
    float vcWeight = 1.0f / (PI * Raio2 * LIGHTPATHLENGTH); //1 = VCcount = Vmcount; so um light path de onde escolher
    
 
    vec3 tcol = vec3(0.0);
    vec3 fcol = vec3(1.0);
    vec3 prevFcol = fcol;

    int jdiff = 0;
    bool specular_bounce = false;

    for (int j = 0; j < ubo_.number_of_bounces; j++) {
        // shoot a ray out into the world
        ray_.t = tmax;
        ray_.mat = getZeroedMaterial();
        ray_.missed = false;
        ray_.from_inside = false;
        traceRayEXT(scene_, ray_flags, cullMask, 0, 0, 0, ro, tmin, rd, tmax, 0);
        float dotRayNormal = clamp( dot(-rd,ray_.normal), 0.0f, 1.0f );
        dVCM *= sqrt(length(ro-prevRo));
        dVCM /= dotRayNormal;
        dVC /= dotRayNormal;
        dVM /= dotRayNormal;
        intersectPoint = ro;

        mZ = normalize(ray_.normal);
        mX = (abs(mZ.x) > 0.99f) ? vec3(0,1,0) : vec3(1,0,0);
        mY = normalize( cross(mZ, mX) );
        mX = cross(mY, mZ);
        
        if (ray_.mat.emissive != vec3(0.0)) {

            float emissionPdfW = (2.0 / length(normalize(cross(lights_[0].v1.xyz,  lights_[0].v2.xyz)))) * max(0.0f, dotRayNormal) * (1/PI);
            float directPdfA = 2.0 / length(normalize(cross(lights_[0].v1.xyz,  lights_[0].v2.xyz)));
            float wCamera = directPdfA * dVCM + emissionPdfW * dVC;
            float misWeight = 1.0f / (1 + wCamera);
                vec3 contrib = fcol * ray_.mat.emissive * misWeight;
                if(notZero(contrib))
                    tcol += contrib;
            return tcol;
        }

        sampleBRDF(rd, ro, fcol, specular_bounce, seed, pdf, specChance, diffChance, bsdfFactor, isLight);
        

        if (ray_.missed) {
            return tcol;
        }

        if(ubo_.debug_normals) {
            return remap(ray_.normal, -1.0f, 1.0f, 0.0f, 1.0f);
        }
        vec3 LocalDirFix = vec3(dot(-prevRayDir,mX), dot(-prevRayDir, mY) ,dotRayNormal);
        // VERTEX CONNECTION TO LIGHT SOURCE
        vec3 lSourced;
        float lSourceweight, lightSource_dist;
        sampleLight(ro, lSourced, lightSource_dist, lSourceweight, seed);
        if (!specular_bounce && !isOccluded(ro, lSourced, lightSource_dist)){
            vec3 localDir = vec3(dot(mX, lSourced), dot(mY, lSourced), dot(mZ, lSourced));
            vec3 reflLocalDir = vec3(-localDir.x, -localDir.y, localDir.z);
            float dot_R_Wi =clamp( dot(localDir, reflLocalDir), 0.0f, 1.0f);
            costheta = abs(dot(ray_.normal, lSourced));
            vec3 normalLight = normalize(cross(lights_[0].v1.xyz, lights_[0].v2.xyz));
            float cosAtLight =clamp( dot(normalLight, - lSourced), 0.0f, 1.0f);
            
            float bsdfRevPdfwPhong = specChance*((ray_.mat.phongExponent+1)*pow(max(0.0f, dot_R_Wi), ray_.mat.phongExponent)*(0.5f/PI));
            
            if( ray_.mat.phong == 0 ){
                bsdfRevPdfwPhong = specChance;
            }
            
            float emissionPdfw = (2.0 / length(cross(lights_[0].v1.xyz, lights_[0].v2.xyz))) * cosAtLight * (1/PI);
            float bsdfDirPdfw = pdf;
            float bsdfRevPdfw = diffChance*max(0.0f, LocalDirFix.z / PI) + bsdfRevPdfwPhong;
            
            if(ray_.mat.phong == 2){
                    bsdfRevPdfw = pdf;
            }

            float  directPdfw = (2.0 / length(cross(lights_[0].v1.xyz, lights_[0].v2.xyz))) * lightSource_dist * lightSource_dist / cosAtLight;
            float wLight = bsdfDirPdfw / /* light_pick_probability * */ directPdfw;
            float wCamera = (emissionPdfw * costheta / (directPdfw * cosAtLight)) * (etaVcm + dVCM + dVC * bsdfRevPdfw);

            float misWeight = 1.0f / (wLight + 1 + wCamera);
            vec3 contrib =(misWeight* costheta / directPdfw) * (lights_[0].emission.xyz * bsdfFactor) ;
            if (notZero(contrib)){
                tcol += prevFcol * contrib;
            }//*  ((misWeight * costheta / (/* lightPickProb * */ directPdfw)) * lights_[0].emission.xyz * bsdfFactor);
        }
        
        
        //VERTEX MERGING

        vec3 accum = vec3(0.0);
        if(!specular_bounce){
        for(int i=0; i < LIGHTPATHLENGTH; i++){
            dist = length( light_paths_[i].position - ro);
            dist = dist*dist;
            if(dist <= Raio2 && !light_paths_[i].specular){
                vec3 nodeDir = normalize(light_paths_[i].position -  prevRo);
                costheta =clamp( dot(ray_.normal, nodeDir), 0.0f, 1.0f);
                if (costheta < 0) costheta *= -1;

                vec3 localDir = vec3(dot(mX, nodeDir), dot(mY, nodeDir), dot(mZ, nodeDir));
                vec3 reflLocalDir = vec3(-localDir.x, -localDir.y, localDir.z);
                float dot_R_Wi =clamp( dot(localDir, reflLocalDir), 0.0f, 1.0f);           
                float bsdfRevPdfwPhong = specChance*((ray_.mat.phongExponent + 1)*pow(max(0.0f, dot_R_Wi), ray_.mat.phongExponent)*(0.5f/PI));

                if(ray_.mat.phong == 0) {
                    bsdfRevPdfwPhong = specChance;
                    }
                
                float cameraBsdfDirPdfW = pdf;
                float bsdfRevPdfw = diffChance*max(0.0f, LocalDirFix.z / PI) + bsdfRevPdfwPhong;
                
                if(ray_.mat.phong == 2){
                    bsdfRevPdfw = pdf;
                }

                float wLight = light_paths_[i].dVCM * (1 / etaVcm) + light_paths_[i].dVM * cameraBsdfDirPdfW;
                float wCamera = dVCM * ( 1 / etaVcm) + dVM * bsdfRevPdfw;
                float misWeight = 1.0f / (wLight+1+wCamera);

                accum += misWeight * light_paths_[i].color * bsdfFactor;
                }}
        if (notZero(accum)){
            tcol += prevFcol * accum * vmNormalization;
            }
        
        }
        //VERTEC CONNECTION 

        for(int i=0; i < LIGHTPATHLENGTH; i++){
            if(!light_paths_[i].specular){
            vec3 ldist = light_paths_[i].position -ro;
            vec3 ldistn = normalize(ldist);
            vec3 lcolor = light_paths_[i].color;
            dist = length(ldist);
            if (!specular_bounce && !isOccluded(ro, ldistn, length(ldist))){
                float cosLight = clamp(dot(light_paths_[i].normal, -ldistn), 0.0f, 1.0f);
                if (cosLight < 0) cosLight *= -1;
                float cosCamera =clamp( dot(ray_.normal, ldistn), 0.0f, 1.0f );
                if (cosCamera < 0) cosCamera *= -1;
                float geometryTerm = cosLight * cosCamera / dist;

                vec3 cameraLocalDir = vec3( dot(mX, ldistn), dot(mY, ldistn), dot(mZ, ldistn));
                vec3 cameraReflLocalDir = vec3(-cameraLocalDir.x, -cameraLocalDir.y, cameraLocalDir.z);
                float cameraDot_R_Wi = clamp( dot(cameraLocalDir, cameraReflLocalDir), 0.0f, 1.0f );

                vec3 lightLocalDir = vec3(dot(light_paths_[i].mX, -ldistn), dot(light_paths_[i].mY, -ldistn), dot(light_paths_[i].mZ, -ldistn));
                vec3 lightReflLocalDir = vec3(-lightLocalDir.x, -lightLocalDir.y, lightLocalDir.z);
                float lightDot_R_Wi =clamp( dot(lightLocalDir, lightReflLocalDir), 0.0f, 1.0f );
                 
                float cameraPdfPhong = specChance*((ray_.mat.phongExponent+1)*pow(max(0.0f, cameraDot_R_Wi),ray_.mat.phongExponent)*(0.5f/PI));
                float lightPdfPhong = specChance*((ray_.mat.phongExponent+1)*pow(max(0.0f, lightDot_R_Wi),ray_.mat.phongExponent)*(0.5f/PI));
                if(ray_.mat.phong == 0){
                    cameraPdfPhong = specChance;
                    lightPdfPhong = specChance;               
                }

                float cameraBsdfRevPdfW = diffChance*max(0.0f, LocalDirFix.z / PI) + cameraPdfPhong;
                float lightLocalDirFix =clamp( dot(-light_paths_[i].prevDir, light_paths_[i].normal), 0.0f, 1.0f );
                float lightBsdfRevPdfW = diffChance*max(0.0f, lightLocalDirFix / PI) + lightPdfPhong;
        
                float cameraBsdfDirPdfA = pdf * abs(cosLight) / (dist*dist);
                float lightBsdfDirPdfA = light_paths_[i].pdf * abs(cosCamera) / (dist*dist);

                if(ray_.mat.phong == 2){
                    cameraBsdfRevPdfW = pdf;
                    lightBsdfRevPdfW = pdf;
                }

                float wLight = (cameraBsdfDirPdfA * cosCamera / sqrt(length(ldist)) ) * (etaVcm + light_paths_[i].dVCM + light_paths_[i].dVC * lightBsdfRevPdfW );
                float wCamera = (lightBsdfDirPdfA * cosLight / sqrt(length(ldist)) ) * (etaVcm + dVCM + dVC * cameraBsdfRevPdfW);
                float misWeight = 1.0f / (wLight+1+wCamera);

                vec3 camerabsdfFactor = bsdfFactor;

                
                vec3 contrib = misWeight * geometryTerm * camerabsdfFactor / getWeightForPath(jdiff, i);
                if (notZero(contrib)){
                    tcol += prevFcol * lcolor * contrib;
                }
        }}
        } 
        prevRayDir = rd;
        prevRo = ro;
        

        costheta = clamp(dot(ray_.normal, rd), 0.0f, 1.0f); 
        refPdfPhong = specChance*((1+1)*pow(costheta,1)*(0.5f/PI));
        if(ray_.mat.phong != 1) refPdfPhong = specChance;
        refPdf = (dot(-rd,ray_.normal)/PI)*diffChance + refPdfPhong;


        if(specular_bounce){
            dVCM = 0.0f;
            dVM = clamp(dot(rd, ray_.normal),0.0f, 1.0f);
            dVC = clamp(dot(rd, ray_.normal),0.0f, 1.0f);
        }
        else{
            dVM = (clamp(dot(rd, ray_.normal),0.0f, 1.0f)/pdf) * (dVM *refPdf + dVCM * (1/etaVcm) + 1.0f);
            dVC = (clamp(dot(rd, ray_.normal),0.0f, 1.0f)/pdf) * (dVC *refPdf + dVCM + etaVcm);
            dVCM = 1/pdf;
        }

        jdiff++;
        // Russian Roulette
        float p = max(fcol.r, max(fcol.g, fcol.b));
        if (randomFloat(seed) > p) {
            break;
        }
        fcol *= 1.0f/p;
        prevFcol = fcol;
    }

    return tcol;
}

void main() {
    vec3 pixel_color = vec3(0);

    for (int curr_sample = 0; curr_sample < ubo_.number_of_samples; curr_sample++) {
        uint seed = initRandom(gl_LaunchIDEXT.xy, ubo_.seed + ubo_.frame + curr_sample);

        const vec2 jitter = vec2(randomFloat(seed), randomFloat(seed)) - 0.5f;
        const vec2 uv_jittered = (gl_LaunchIDEXT.xy + jitter) / vec2(gl_LaunchSizeEXT.xy);
        const vec2 screen = uv_jittered * 2.0 - 1.0;

        vec4 origin = ubo_.model_view_inverse * vec4(0, 0, 0, 1);
        vec4 target = ubo_.projection_inverse * vec4(screen.x, screen.y, 1, 1);
        vec4 direction = ubo_.model_view_inverse * vec4(normalize(target.xyz), 0);

        constructLightPath(seed);

        pixel_color += traceEyePath(origin.xyz, direction.xyz, seed);
    }

    pixel_color /= float(ubo_.number_of_samples);

    vec4 last_frame_color = imageLoad(accumulation_image_, ivec2(gl_LaunchIDEXT.xy));
    float blend = (ubo_.frame < 2 || last_frame_color.a == 0.0) ? 1.0f : 1.0f / (1.0f + (1.0f / last_frame_color.a));
    pixel_color = mix(last_frame_color.rgb, pixel_color, blend);

    imageStore(accumulation_image_, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_color, blend));

    // post processing
    pixel_color *= ubo_.exposure;

    if (ubo_.tone_map) {
        pixel_color = ACESFilm(pixel_color);
    }

    if (ubo_.gamma_correction) {
        pixel_color = linearToSRGB(pixel_color);
    }

    imageStore(output_image_, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_color, blend));
}